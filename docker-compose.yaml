services:
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"   
      - "15672:15672" 
    networks:
      - app-network
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - app-network
    restart: unless-stopped
  producer-service:
    build:
      context: ./producer-service
      dockerfile: Dockerfile
    container_name: producer-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped
  consumer-service:
    build:
      context: ./consumer-service
      dockerfile: Dockerfile
    container_name: consumer-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:password@mongodb:27017/marketplace?authSource=admin
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  orders-ui:
    build:
      context: ./orders-ui
      dockerfile: Dockerfile
    container_name: orders-ui
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - consumer-service
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data: